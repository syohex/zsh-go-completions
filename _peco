#compdef peco

# The MIT License (MIT)
#
# Copyright (c) 2020 Shohei YOSHIDA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

local -a matchers
local pecorc

if [[ -e "$XDG_CONFIG_DIRS/peco/config.json" ]]; then
  pecorc="$XDG_CONFIG_DIRS/peco/config.json"
elif [[ -e "$HOME/.peco/config.json" ]]; then
  pecorc="$HOME/.peco/config.json"
fi

matchers=(IgnoreCase CaseSensitive Regexp SmartCase)
if [[ "x$pecorc" != "x" ]]; then
  matchers=($matchers
            $(perl -0777 -MJSON::PP -ne \
                   'print "$_\n" for keys %{decode_json($_)->{CustomMatcher}}' \
                   $pecorc))
fi

_arguments -n : \
  '(--query)--query=-[Specifies the default query to be used upon startup]' \
  '(--rcfile)--rcfile=[Configuration file]:config_file:_files' \
  '(--null)--null[Use null character as separator]' \
  '(--no-ignore-case)--no-ignore-case=[Starts in case insensitive mode]' \
  '(-b,--buffer-size)'{-b,--buffer-size=-}'[Number of lines to keep in search buffer]' \
  '(--initial-index)--initial-index=-[Position of the initial index of the selection(0 base)]' \
  '(--initial-filter --initial-matcher)'{--initial-filter,--initial-matcher=-}'[Specify default matcher]:matcher:'"($matchers)" \
  '(--layout)--layout=-[Speficy the layout to use]::layout:(top-down bottom-up)' \
  '(--prompt)--prompt=-[Specify prompt]' \
  '(--select-1)--select-1[Select first item if given 1 item]' \
  '(--on-cancel)--on-cancel=[Specify action on cancel]::action:(success error)' \
  '(--selection-prefix)--selection-prefix=[Prefix of current selected line]' \
  '(- :)--version[Display the version of peco]' \
  '(- :)--help[Display a help message]' \
  '*: :_files'

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
