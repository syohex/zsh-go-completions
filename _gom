#compdef gom

# The MIT License (MIT)
#
# Copyright (c) 2016 Syohei YOSHIDA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

typeset -A opt_args
local context state line

local -a _gom_subcommands
_gom_subcommands=(
  'build:Build with vendor packages'
  'install:Install bundled packages into vendor directory'
  'test:Run tests with bundles'
  'run:Run go file with bundles'
  'doc:Run godoc for bundles'
  'exec:Execute command with bundle environment'
  'gen:Generate .travis.yml or gomfile'
)

local -a build_flags
build_flags=(
  '-a[force reinstallation of packages that are already up-to-date]'
  '-n[print the commands but do not run them]'
  '-p[number of parallel builds]:number'
  '-race[enable data race detection]'
  '-x[print the commands]'
  '-work[print temporary directory name and keep it]'
  '-ccflags[flags for 5c/6c/8c]:flags'
  '-gcflags[flags for 5g/6g/8g]:flags'
  '-ldflags[flags for 5l/6l/8l]:flags'
  '-gccgoflags[flags for gccgo]:flags'
  '-compiler[name of compiler to use]:name'
  '-installsuffix[suffix to add to package directory]:suffix'
  '-tags[list of build tags to consider satisfied]:tags'
)

_arguments '*:: :->subcmd'

if [[ "$state" == "subcmd" ]];then

  if (( CURRENT == 1)); then
    _describe -t commands "gom command" _gom_subcommands -V1
    return
  else
    local opts curcontext

    case "$words[1]" in
      build|run|install|run)
        opts=(${build_flags[@]})
        ;;
      test)
        opts=(
          ${build_flags[@]}
          '-c[Compile the test binary to pkg.test but do not run it.]'
          '-i[Install packages that are dependencies of the test]'
        )
        ;;
      exec)
        opts=()
        _arguments -s : "$opts[@]" '*::arguments:_normal' && return 0
        ;;
      gen)
        opts=()
        _arguments -s : "$opts[@]" '*::genfile:(travis-yml gomfile)' && return 0
        ;;
      *)
        opts=()
        ;;
    esac
    _arguments -s : "$opts[@]" "*::Files:_files -g '*.go'"
  fi
fi

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
